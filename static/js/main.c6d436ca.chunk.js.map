{"version":3,"sources":["CityWidget.js","App.js","serviceWorker.js","index.js"],"names":["CityWidget","props","state","apiKey","base","city","cityName","temp","high","low","mainText","desc","iconUrl","intervalId","this","getData","setInterval","bind","apiUrl","fetch","then","res","json","result","Object","keys","length","setState","Math","round","main","weather","description","temp_max","temp_min","icon","error","console","log","clearInterval","className","toUpperCase","src","alt","React","Component","App","cities","handleChange","handleSubmit","deleteCityWidget","e","preventDefault","newCity","text","key","Date","now","concat","id","filteredItems","filter","target","value","content","map","onClick","cityKey","onSubmit","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c6d436ca.chunk.js","sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react'\n\n\nclass CityWidget extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            apiKey: \"a699c2e376e4574de23448fa88c36604\",\n            base: \"api.openweathermap.org/data/2.5/weather?\",\n            city: this.props.cityName,\n            temp: 0,\n            high: 0,\n            low: 0,\n            mainText: \"\",\n            desc: \"\",\n            iconUrl: \"\",\n            intervalId: \"\"\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n        \n        // Refresh data every 5 seconds\n        this.intervalId = setInterval(this.getData.bind(this), 5000);\n    }\n\n    getData() {\n        let apiUrl = `${this.state.base}q=${this.state.city}&units=imperial&appid=${this.state.apiKey}`\n        //console.log(apiUrl);\n\n        fetch(\"https://\" + apiUrl)\n        .then(res =>  res.json())\n        .then(\n            (result) => {\n                //console.log(result.weather[0].main)\n                if (Object.keys(result).length !== 2) {\n                    this.setState({\n                        temp: Math.round(result.main.temp),\n                        mainText: result.weather[0].main,\n                        desc: result.weather[0].description,\n                        high: Math.round(result.main.temp_max),\n                        low: Math.round(result.main.temp_min),\n                        iconUrl: \"http://openweathermap.org/img/wn/\" + result.weather[0].icon + \"@2x.png\"\n                    });\n                } else {\n                    this.setState({\n                        mainText: \"Please enter a valid city name\"\n                    })\n                }\n            },\n            (error) => {\n                console.log(\"Error: \" + error)\n            }\n        )\n    }\n    componentWillUnmount() {\n\n        // stop getData() from continuing to run even after unmounting this component\n        clearInterval(this.intervalId);\n    }\n\n\n    render() {\n        return (\n            <div className=\"cityWidget\">\n                <div className=\"cityName\">{(this.state.city).toUpperCase()}</div>\n                <img src={this.state.iconUrl} alt={this.state.description} />\n                <div className=\"allTemps\">\n                    <div className=\"high\"> \n                        <span>&#11014;</span>\n                        {this.state.high}\n                    </div>\n                    <div className=\"tempDeg\">\n                        <div className=\"temp\">{this.state.temp}</div>\n                        <div className=\"degree\">Â°F</div>\n                    </div>\n                    <div className=\"low\"> \n                        <span>&#11015;</span>\n                        {this.state.low}\n                    </div>\n                </div>\n                \n                <div className=\"mainText\">{this.state.mainText}</div>\n            </div>\n        )\n    } \n}\n\n\nexport default CityWidget","import React from 'react';\nimport CityWidget from './CityWidget'\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { cities: [], city: \"\"}\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.deleteCityWidget = this.deleteCityWidget.bind(this)\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.city.length === 0) {\n      return;\n    }\n\n    const newCity = {\n      text: this.state.city,\n      key: Date.now()\n    };\n\n    this.setState(state => ({\n      cities: state.cities.concat(newCity),\n      city: ''\n    }));\n  }\n\n  deleteCityWidget(id) {\n    console.log(\"Key: \" + id)\n    const filteredItems = this.state.cities.filter(city => city.key !== id);\n    this.setState({\n      cities: filteredItems\n    })\n\n  }\n\n  handleChange(e) {\n    this.setState({ city: e.target.value })\n  }\n\n\n  render() {\n    let content = this.state.cities.map(city => (\n      <div className=\"outerWidget\" key={city.key}>\n        <span className=\"deleteWidget\" onClick={() => this.deleteCityWidget(city.key)}>&#10006;</span>\n        <CityWidget cityKey={city.key} cityName={city.text} />\n      </div>\n    ))\n\n    return (\n      <div className=\"App\">\n        <div className=\"main\">\n          <div className=\"header\">\n            <div>Weather Widgets</div>\n          </div>\n          <form onSubmit={this.handleSubmit}>\n            <input \n              type=\"text\" \n              className=\"searchBar\" \n              value={this.state.city}\n              placeholder=\"Search City\" \n              onChange={this.handleChange}/>\n            <button type=\"submit\" onClick={this.handleSubmit}>Add City</button>\n          </form>\n          <div className=\"content\">\n            {content}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}